---
description: 
globs: 
alwaysApply: false
---
# Post Submission Debugging - Session User ID Issue

This document tracks the investigation into the 500 Internal Server Error occurring during post submission, identified as a "session user error".

## Summary of Actions and Findings

### 1. Initial Investigation (Post Submission API)

*   **Action:** Examined the `/api/posts/submit` API route (`app/api/posts/submit/route.js`).
*   **Finding:** The route uses `getServerSession()` for authentication and explicitly checks for `session.user.id`. If `session.user.id` is missing, it returns a 401 Authentication Error.
*   **Log Analysis:** Logs from this API route showed that `getServerSession()` was returning a `session` object where `session.user` was present, but `session.user.id` was indeed missing.
    ```
    API Route: Full session object after getServerSession: {
      "user": {
        "name": "Reuebn Tetteh",
        "email": "rkotcreativesolutions@gmail.com",
        "image": null
        // ID IS MISSING HERE
      }
    }
    API Route: Authentication failed, no valid session or user ID
    ```

### 2. NextAuth.js Configuration Review

*   **Action:** Located and reviewed the NextAuth.js configuration file at `app/api/auth/[...nextauth]/route.js`.
*   **Finding:** The configuration file *already contains* the standard logic to add the user's ID to the session:
    *   The `CredentialsProvider`'s `authorize` function correctly returns an `id` field (derived from `user._id`).
    *   The `callbacks.jwt` is designed to take `user.id` (from the provider or `authorize` function) and add it to the `token` as `token.id`.
    *   The `callbacks.session` is designed to take `token.id` (from the `jwt` callback) and add it to the `session.user` object as `session.user.id`.
    *   Extensive logging was already present in these callbacks.

### 3. Discrepancy Identified

*   **Discovery:** There is a clear discrepancy. The NextAuth.js configuration *should* be providing `session.user.id`, but `getServerSession()` in the API route is not receiving it. This means the `id` is getting lost or not being set correctly somewhere in the NextAuth.js token/session propagation pipeline, despite the configuration appearing correct.

## Next Steps & Current Focus

The primary goal is to understand why `session.user.id` is not being correctly populated despite the NextAuth.js configuration.

1.  **Detailed Log Analysis from NextAuth Callbacks:**
    *   **Action Required:** Perform a fresh sign-out and sign-in.
    *   **Action Required:** Trigger the post submission flow that calls `/api/posts/submit`.
    *   **Action Required:** Capture and carefully examine the server-side console logs generated by the `jwt` and `session` callbacks in `app/api/auth/[...nextauth]/route.js`. We need to trace the `id` from the initial `user` object through the `token` and into the final `session` object.
    *   **Key questions for the logs:**
        *   Does the `user` object received by the `jwt` callback (especially on initial sign-in) contain an `id` property? (Log: `[NextAuth Callback - jwt] Received user object...`)
        *   Is `token.id` successfully logged after being set in the `jwt` callback? (Log: `[NextAuth Callback - jwt] Added id to token...`)
        *   Does the `token` object received by the `session` callback contain the `id`? (Log: `[NextAuth Callback - session] Received token...`)
        *   Is `session.user.id` successfully logged after being set in the `session` callback? (Log: `[NextAuth Callback - session] Added user.id to session...`)

2.  **Potential Root Causes (if logs don't reveal an obvious break in the chain):**
    *   **Stale Session/Cache:** Ensure the session is truly fresh.
    *   **Provider-Specific Data Flow:** How the `user` object is initially populated by the specific login provider (Google, GitHub, Credentials) before hitting the `jwt` callback.
    *   **Environment Consistency:** Double-check `NEXTAUTH_URL`, `NEXTAUTH_SECRET`.
    *   **NextAuth Version Quirks:** Although unlikely with standard setup, keep in mind.

By analyzing these specific logs from the NextAuth.js callbacks, we should be able to pinpoint where the `id` is failing to be propagated into the session.

# Post Submission Debugging Progress

This document tracks the investigation into various issues with post submission in the application.

## Previous Issue: Session User ID Issue

_[Previous investigation on session ID issue - resolved]_

## Current Focus: Bluesky Video Upload Implementation

### 1. Progress on Bluesky Integration

*   **Previous Issues Fixed:**
    *   **platformAccountId mapping issue:** Successfully fixed the data mapping in apiManager.js to correctly extract the user's Bluesky DID (platformAccountId) from the account data structure.
    *   **accessToken mapping issue:** Fixed the mapping of accessToken and refreshToken from the nested originalData object in apiManager.js.
    *   **Post submission:** Basic post submission to Bluesky now works - the application successfully connects to Bluesky and creates posts.

### 2. Current Issue: Video Posting

*   **Current Status:** When posting videos to Bluesky, the application posts the Firebase Storage URL as plain text instead of uploading and embedding the actual video.
*   **Evidence:** The screenshot shows a post on Bluesky that contains the text "Media: https://firebasestorage.googleapis.com/..." instead of an embedded, playable video.
*   **Root Cause:** In the current `blueSkyService.js` implementation, lines 111-120, non-image media (like videos) are not properly uploaded to Bluesky but simply added as text links:
    ```javascript
    } else {
      // Add non-image media as links for now
      if (postText) postText += "\n\n";
      postText += `Media: ${mediaItem.url}`;

      mediaUploadResults.push({
        originalName: mediaItem.originalName,
        status: "linked",
        message: "Non-image media added as link",
      });
    }
    ```

### 3. Next Steps: Implementing Proper Video Upload

*   **Requirements for Bluesky Video Upload:**
    *   Implement proper video upload to Bluesky using their video upload API
    *   Handle video file processing (verification, size limits, format checks)
    *   Monitor upload job status as Bluesky processes videos asynchronously
    *   Implement error handling for failed uploads
    
*   **Implementation Plan:**
    *   **Detection:** Update the media processing section in `blueSkyService.js` to properly identify videos 
    *   **Validation:** Add validation for video size, format, and duration
    *   **Upload:** Implement the Bluesky video upload API using `@atproto/api`
    *   **Status Monitoring:** Add code to poll for video processing status
    *   **Embedding:** Update post creation to properly embed the video once processed

*   **Technical Considerations:**
    *   Bluesky has a ~100MB video size limit
    *   Videos must be in supported formats (MP4, MOV, etc.)
    *   Video uploads are processed asynchronously, requiring status checks
    *   Upload tokens/URLs may expire, requiring careful implementation

The most important next step is to replace the current basic link-posting approach for videos with a proper implementation of Bluesky's video upload API.
